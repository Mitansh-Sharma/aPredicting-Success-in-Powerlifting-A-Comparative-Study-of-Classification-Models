# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1heSK8Rz1Idl7TcqG24AMGPt-B0FcKE8i
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('/content/drive/MyDrive/openpowerlifting-2024-01-06-4c732975.csv')

data.head()

data

data['Squat_Success'] = (data['Squat3Kg'] >= 0).astype(int)
data['Bench_Success'] = (data['Bench3Kg'] >= 0).astype(int)
data['Deadlift_Success'] = (data['Deadlift3Kg'] >= 0).astype(int)

print(data.columns)

input_var= [
    'Sex', 'Age', 'BodyweightKg','Squat1Kg', 'Squat2Kg','Bench1Kg', 'Bench2Kg', 'Bench3Kg', 'Best3BenchKg','Deadlift1Kg', 'Deadlift2Kg', 'Deadlift3Kg','Best3DeadliftKg', 'Squat_Success']

input_var2=['Sex', 'Age', 'BodyweightKg','Best3SquatKg','Best3BenchKg','Best3DeadliftKg','Bench_Success', 'Deadlift_Success','Squat_Success']

input_var3=['Sex', 'Age', 'BodyweightKg','Squat1Kg', 'Squat2Kg', 'Squat3Kg','Best3SquatKg','Best3BenchKg','Best3DeadliftKg','Squat_Success']

dataset=data[input_var]

dataset.columns

dataset['Sex']=dataset['Sex'].map({'M':0, 'F':1})

X=dataset.iloc[:,:-1]
y=dataset.iloc[:,-1]

print(X)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X=sc.fit_transform(X)

print(X)

from sklearn.impute import SimpleImputer
imputer=SimpleImputer(missing_values=np.nan,strategy='mean')
imputer.fit(X)
X=imputer.transform(X)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)

from imblearn.over_sampling import SMOTE
smote=SMOTE(random_state=42)
X_train_smote,y_train_smote=smote.fit_resample(X_train,y_train)

"""# Random Forrest"""

from sklearn.ensemble import RandomForestClassifier
classifier=RandomForestClassifier(n_estimators=100,random_state=0 )
classifier.fit(X_train_smote,y_train_smote)

y_pred=classifier.predict(X_test)

print(y_pred)

from sklearn.metrics import confusion_matrix,accuracy_score , classification_report , f1_score , precision_score , recall_score , RocCurveDisplay
cm=confusion_matrix(y_test,y_pred)
print(cm)
print(f1_score(y_test,y_pred))
print(recall_score(y_test,y_pred))
print(precision_score(y_test,y_pred))
accuracy_score(y_test,y_pred)

disp=classification_report(y_test,y_pred)
print(disp)
disp2=RocCurveDisplay.from_predictions(y_test,y_pred)
plt.show()

"""# Logistic Reg"""

from sklearn.linear_model import LogisticRegression
classifier=LogisticRegression(random_state=0 )
classifier.fit(X_train_smote,y_train_smote)

y_pred=classifier.predict(X_test)
y_pred

from sklearn.metrics import confusion_matrix,accuracy_score, f1_score , precision_score , recall_score , RocCurveDisplay , classification_report
cm=confusion_matrix(y_test,y_pred)
print(cm)
print(f1_score(y_test,y_pred))
print(recall_score(y_test,y_pred))
print(precision_score(y_test,y_pred))
accuracy_score(y_test,y_pred)

disp=classification_report(y_test,y_pred)
print(disp)
disp2=RocCurveDisplay.from_predictions(y_test,y_pred)
plt.show()

"""# ANN"""

import  tensorflow as tf

ann=tf.keras.models.Sequential()

ann.add(tf.keras.layers.Dense(units=6,activation='relu'))

ann.add(tf.keras.layers.Dense(units=6,activation='relu'))

ann.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))

ann.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

ann.fit(X_train_smote,y_train_smote,batch_size=32,epochs=100)

y_pred=ann.predict(X_test)
y_pred=(y_pred>0.5)

from sklearn.metrics import confusion_matrix,accuracy_score , classification_report , f1_score , precision_score , recall_score , RocCurveDisplay
cm=confusion_matrix(y_test,y_pred)
print(cm)
print(classification_report(y_test,y_pred))
#

disp=classification_report(y_test,y_pred)
print(disp)
disp2=RocCurveDisplay.from_predictions(y_test,y_pred)
plt.show()

"""# Decision Tree"""

from sklearn.tree import DecisionTreeClassifier
classifier=DecisionTreeClassifier(criterion='entropy',random_state=0)
classifier.fit(X_train,y_train)

y_pred=classifier.predict(X_test)
y_pred

from sklearn.metrics import confusion_matrix,accuracy_score
cm=confusion_matrix(y_test,y_pred)
print(cm)
print(f1_score(y_test,y_pred))
print(recall_score(y_test,y_pred))
print(precision_score(y_test,y_pred))
accuracy_score(y_test,y_pred)

disp=classification_report(y_test,y_pred)
print(disp)
disp2=RocCurveDisplay.from_predictions(y_test,y_pred)
plt.show()

"""# XGBoost"""

from xgboost import XGBClassifier
classifier=XGBClassifier()
classifier.fit(X_train,y_train)

from sklearn.metrics import classification_report , confusion_matrix , RocCurveDisplay
y_pred=classifier.predict(X_test)
cm=confusion_matrix(y_test,y_pred)
print(cm)
print(classification_report(y_test,y_pred))
disp2=RocCurveDisplay.from_predictions(y_test,y_pred)
plt.show()